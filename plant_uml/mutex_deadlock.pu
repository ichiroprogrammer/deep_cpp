@startuml
!theme plain
title デッドロック発生のシナリオ

participant "Thread 1" as T1
participant "acc1.mtx_" as M1
participant "acc2.mtx_" as M2
participant "Thread 2" as T2

== 初期状態 ==
note over T1, T2
  両スレッドが同時に送金処理を開始
end note

== ロック取得フェーズ ==
T1 -> M1: lock() ✓
activate M1
note right of T1
  acc1.transfer_ng(acc2, 100)
  acc1.mtx_ のロック成功
end note

T2 -> M2: lock() ✓
activate M2
note left of T2
  acc2.transfer_ng(acc1, 100)
  acc2.mtx_ のロック成功
end note

== デッドロック発生 ==
T1 -x M2: lock() ✗
note right of T1
  acc2.mtx_ のロック待機中...
  (Thread 2が保持中)
end note

T2 -x M1: lock() ✗
note left of T2
  acc1.mtx_ のロック待機中...
  (Thread 1が保持中)
end note

note over T1, T2 #FF6B6B
  **デッドロック発生**
  互いに相手のロック解放を待ち続ける
  
  Thread 1: acc1.mtx_ を保持、acc2.mtx_ を待機
  Thread 2: acc2.mtx_ を保持、acc1.mtx_ を待機
  
  → プログラムが停止（永遠に進まない）
end note

@enduml
